ggplot() +
geom_line(data = data, aes(x = life_expectancy_country, y = tax_revenue_country_country), color = "#432818") +   # Line color
geom_point(data = data, aes(x = life_expectancy_country, y = tax_revenue_country_country), color = "#ffe6a7", size = 3) +  # Point color and size
geom_smooth(data = avg_tax_revenue, aes(x = life_expectancy_country, y = avg_tax_revenue), method = "lm", se = FALSE, color = "red") +  # Add trend line based on average values
labs(
title = "Life Expectancy vs. Tax Revenue",    # Title of the plot
x = "Life Expectancy",                         # X-axis label
y = "Tax Revenue"                        # Y-axis label
) +
theme_minimal() +   # Minimal theme for the plot
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),  # Remove grid lines
axis.line = element_line(color = "black", size = 0.2)) +  # Customize axis lines
xlim(65, 80)  # Set the x-axis limits
# Line chart with life expectancy on the x-axis and tax revenue on the y-axis
ggplot() +
geom_line(data = data, aes(x = life_expectancy_country, y = tax_revenue_country_country), color = "#432818") +   # Line color
geom_point(data = data, aes(x = life_expectancy_country, y = tax_revenue_country_country), color = "#adc178", size = 3) +  # Point color and size
geom_smooth(data = avg_tax_revenue, aes(x = life_expectancy_country, y = avg_tax_revenue), method = "lm", se = FALSE, color = "red") +  # Add trend line based on average values
labs(
title = "Life Expectancy vs. Tax Revenue",    # Title of the plot
x = "Life Expectancy",                         # X-axis label
y = "Tax Revenue"                        # Y-axis label
) +
theme_minimal() +   # Minimal theme for the plot
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),  # Remove grid lines
axis.line = element_line(color = "black", size = 0.2)) +  # Customize axis lines
xlim(65, 80)  # Set the x-axis limits
# Line chart with life expectancy on the x-axis and tax revenue on the y-axis
ggplot() +
geom_line(data = data, aes(x = life_expectancy_country, y = tax_revenue_country_country), color = "#432818") +   # Line color
geom_point(data = data, aes(x = life_expectancy_country, y = tax_revenue_country_country), color = "#adc178", size = 3) +  # Point color and size
geom_smooth(data = avg_tax_revenue, aes(x = life_expectancy_country, y = avg_tax_revenue), method = "lm", se = FALSE, color = "#ffe66d") +  # Add trend line based on average values
labs(
title = "Life Expectancy vs. Tax Revenue",    # Title of the plot
x = "Life Expectancy",                         # X-axis label
y = "Tax Revenue"                        # Y-axis label
) +
theme_minimal() +   # Minimal theme for the plot
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),  # Remove grid lines
axis.line = element_line(color = "black", size = 0.2)) +  # Customize axis lines
xlim(65, 80)  # Set the x-axis limits
# Line chart with life expectancy on the x-axis and tax revenue on the y-axis
ggplot() +
geom_line(data = data, aes(x = life_expectancy_country, y = tax_revenue_country_country), color = "#432818") +   # Line color
geom_point(data = data, aes(x = life_expectancy_country, y = tax_revenue_country_country), color = "#adc178", size = 3) +  # Point color and size
geom_smooth(data = avg_tax_revenue, aes(x = life_expectancy_country, y = avg_tax_revenue), method = "lm", se = FALSE, color = "#0d3b66") +  # Add trend line based on average values
labs(
title = "Life Expectancy vs. Tax Revenue",    # Title of the plot
x = "Life Expectancy",                         # X-axis label
y = "Tax Revenue"                        # Y-axis label
) +
theme_minimal() +   # Minimal theme for the plot
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),  # Remove grid lines
axis.line = element_line(color = "black", size = 0.2)) +  # Customize axis lines
xlim(65, 80)  # Set the x-axis limits
ffe66d
ffe66d
# Line chart with life expectancy on the x-axis and tax revenue on the y-axis
ggplot() +
geom_line(data = data, aes(x = life_expectancy_country, y = tax_revenue_country_country), color = "#432818") +   # Line color
geom_point(data = data, aes(x = life_expectancy_country, y = tax_revenue_country_country), color = "#adc178", size = 3) +  # Point color and size
geom_smooth(data = avg_tax_revenue, aes(x = life_expectancy_country, y = avg_tax_revenue), method = "lm", se = FALSE, color = "#ffe66d") +  # Add trend line based on average values
labs(
title = "Life Expectancy vs. Tax Revenue",    # Title of the plot
x = "Life Expectancy",                         # X-axis label
y = "Tax Revenue"                        # Y-axis label
) +
theme_minimal() +   # Minimal theme for the plot
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),  # Remove grid lines
axis.line = element_line(color = "black", size = 0.2)) +  # Customize axis lines
xlim(65, 80)  # Set the x-axis limits
# Line chart with life expectancy on the x-axis and tax revenue on the y-axis
ggplot() +
geom_line(data = data, aes(x = life_expectancy_country, y = tax_revenue_country_country), color = "#432818") +   # Line color
geom_point(data = data, aes(x = life_expectancy_country, y = tax_revenue_country_country), color = "#adc178", size = 3) +  # Point color and size
geom_smooth(data = avg_tax_revenue, aes(x = life_expectancy_country, y = avg_tax_revenue), method = "lm", se = FALSE, color = "#f6aa1c") +  # Add trend line based on average values
labs(
title = "Life Expectancy vs. Tax Revenue",    # Title of the plot
x = "Life Expectancy",                         # X-axis label
y = "Tax Revenue"                        # Y-axis label
) +
theme_minimal() +   # Minimal theme for the plot
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),  # Remove grid lines
axis.line = element_line(color = "black", size = 0.2)) +  # Customize axis lines
xlim(65, 80)  # Set the x-axis limits
# Define the path to the image file
image_path <- "C:/Users/teres/Desktop/DataViz/Activity 1/image.png"
# Line chart with life expectancy on the x-axis and tax revenue on the y-axis
ggplot(data, aes(x = life_expectancy_country, y = tax_revenue_country_country)) +
geom_line(color = "blue") +   # Line color
geom_image(color = "red", size = 0.05, data = NULL, aes(x = life_expectancy_country, y = tax_revenue_country_country, image = image_path)) +  # Use geom_image for the points
labs(
title = "Life Expectancy vs. Tax Revenue",    # Title of the plot
x = "Life Expectancy",                         # X-axis label
y = "Tax Revenue"                        # Y-axis label
) +
theme_minimal() +   # Minimal theme for the plot
xlim(65, 80)        # Set the lower limit for the x-axis to 65
# Define the path to the image file
image_path <- "C://Users//teres//Desktop//DataViz//Activity 1//image.png"
# Line chart with life expectancy on the x-axis and tax revenue on the y-axis
ggplot(data, aes(x = life_expectancy_country, y = tax_revenue_country_country)) +
geom_line(color = "blue") +   # Line color
geom_image(color = "red", size = 0.05, data = NULL, aes(x = life_expectancy_country, y = tax_revenue_country_country, image = image_path)) +  # Use geom_image for the points
labs(
title = "Life Expectancy vs. Tax Revenue",    # Title of the plot
x = "Life Expectancy",                         # X-axis label
y = "Tax Revenue"                        # Y-axis label
) +
theme_minimal() +   # Minimal theme for the plot
xlim(65, 80)        # Set the lower limit for the x-axis to 65
# Define the path to the image file
image_path <- "C:/Users/teres/Desktop/DataViz/Activity 1/image.png"
# Line chart with life expectancy on the x-axis and tax revenue on the y-axis
ggplot(data, aes(x = life_expectancy_country, y = tax_revenue_country_country)) +
geom_line(color = "blue") +   # Line color
geom_image(color = "red", size = 0.05, data = NULL, aes(x = life_expectancy_country, y = tax_revenue_country_country, image = image_path)) +  # Use geom_image for the points
labs(
title = "Life Expectancy vs. Tax Revenue",    # Title of the plot
x = "Life Expectancy",                         # X-axis label
y = "Tax Revenue"                        # Y-axis label
) +
theme_minimal() +   # Minimal theme for the plot
xlim(65, 80)        # Set the lower limit for the x-axis to 65
file.exists("C:/Users/teres/Desktop/DataViz/Activity 1/image.png")
file.exists("C:\Users\teres\Desktop\DataViz\Activity 1\R files\piggy-bank.png")
# Define the path to the image file
image_path <- "C:\\Users\\teres\\Desktop\\DataViz\\Activity 1\\R files\\piggy-bank.png"
# Line chart with life expectancy on the x-axis and tax revenue on the y-axis
ggplot(data, aes(x = life_expectancy_country, y = tax_revenue_country_country)) +
geom_line(color = "blue") +   # Line color
geom_image(color = "red", size = 0.05, data = NULL, aes(x = life_expectancy_country, y = tax_revenue_country_country, image = image_path)) +  # Use geom_image for the points
labs(
title = "Life Expectancy vs. Tax Revenue",    # Title of the plot
x = "Life Expectancy",                         # X-axis label
y = "Tax Revenue"                        # Y-axis label
) +
theme_minimal() +   # Minimal theme for the plot
xlim(65, 80)        # Set the lower limit for the x-axis to 65
# Define the path to the image file
image_path <- "C:\\Users\\teres\\Desktop\\DataViz\\Activity 1\\R files\\piggy-bank.png"
# Line chart with life expectancy on the x-axis and tax revenue on the y-axis
ggplot(data, aes(x = life_expectancy_country, y = tax_revenue_country_country)) +
geom_line(color = "blue") +   # Line color
geom_image(color = "red", size = 0.05, data = NULL, aes(x = life_expectancy_country, y = tax_revenue_country_country, image = image_path)) +  # Use geom_image for the points
labs(
title = "Life Expectancy vs. Tax Revenue",    # Title of the plot
x = "Life Expectancy",                         # X-axis label
y = "Tax Revenue"                        # Y-axis label
) +
theme_minimal() +   # Minimal theme for the plot
xlim(65, 80)        # Set the lower limit for the x-axis to 65
# Define the path to the image file
image_path <- "C:/Users/teres/Desktop/DataViz/Activity 1/R files/piggy-bank.png"
# Line chart with life expectancy on the x-axis and tax revenue on the y-axis
ggplot(data, aes(x = life_expectancy_country, y = tax_revenue_country_country)) +
geom_line(color = "blue") +   # Line color
geom_image(aes(image = image_path), size = 0.07) +  # Add image points
labs(
title = "Life Expectancy vs. Tax Revenue",    # Title of the plot
cex.main = 1,
x = "Life Expectancy",                         # X-axis label
y = "Tax Revenue"                        # Y-axis label
) +
theme_minimal() +   # Minimal theme for the plot
xlim(65, 80)
# Set the file path, replacing "your_file.csv" with your actual file name and ensuring correct slashes
file_path <- "C:\\Users\\teres\\Desktop\\DataViz\\Activity 1\\Billionaires Statistics Dataset filtered.csv"
# Read the data using forward slashes for portability
data <- read.csv(file_path, sep = ",")
library(ggplot2)
library(dplyr)
library(forcats)
library(tidytext)
library(stringr)
library(RColorBrewer)
library(ggpattern)
library(forcats)
library(viridis)
library(hrbrthemes)
library(ggimage)
library(rgl)
library(png)
library(ggdist)
library(gridExtra)
library(rnaturalearth)
library(rnaturalearthdata)
library(sf)
# Define the path to the image file
image_path <- "C:/Users/teres/Desktop/DataViz/Activity 1/R files/piggy-bank.png"
# Line chart with life expectancy on the x-axis and tax revenue on the y-axis
ggplot(data, aes(x = life_expectancy_country, y = tax_revenue_country_country)) +
geom_line(color = "blue") +   # Line color
geom_image(aes(image = image_path), size = 0.07) +  # Add image points
labs(
title = "Life Expectancy vs. Tax Revenue",    # Title of the plot
cex.main = 1,
x = "Life Expectancy",                         # X-axis label
y = "Tax Revenue"                        # Y-axis label
) +
theme_minimal() +   # Minimal theme for the plot
xlim(65, 80)
# Line chart with life expectancy on the x-axis and tax revenue on the y-axis
ggplot(data, aes(x = life_expectancy_country, y = tax_revenue_country_country)) +
geom_line(color = "blue") +   # Line color
geom_point(color = "red", size = 3) +  # Point color and size
labs(
title = "Life Expectancy vs. Tax Revenue",    # Title of the plot
cex.main = 1,
x = "Life Expectancy",                         # X-axis label
y = "Tax Revenue"                        # Y-axis label
) +
theme_minimal() +   # Minimal theme for the plot
theme(
panel.grid.major = element_line(color = "black"),  # Change major grid line color to black
panel.grid.minor = element_line(color = "black")   # Change minor grid line color to black
) +
xlim(65, 80)
# Read CSV file
data <- read.csv("Data_DMML.csv")
library(tidyverse)
library(dplyr)
library(forcats)
library(cluster)
library(fpc)
library(dbscan)
library(stats)
library(factoextra)
library(tidytext)
library(stringr)
library(RColorBrewer)
library(ggpattern)
library(forcats)
library(viridis)
library(hrbrthemes)
library(ggimage)
library(rgl)
library(png)
library(ggdist)
library(gridExtra)
library(rnaturalearth)
library(rnaturalearthdata)
library(sf)
# View the structure of the data
str(data)
# View the first few rows of the data
head(data)
# Specify the columns to remove
columns_to_remove <- c("ID")
# Remove the specified columns from the dataset
new_data <- data[, !names(data) %in% columns_to_remove]
# Check for outliers in the entire dataset
outliers <- sapply(new_data, function(x) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = TRUE)
H <- 1.5 * IQR(x, na.rm = TRUE)
x < (qnt[1] - H) | x > (qnt[2] + H)
})
# Check for outliers in the entire dataset
outliers <- sapply(new_data, function(x) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = TRUE)
H <- 1.5 * IQR(x, na.rm = TRUE)
x < (qnt[1] - H) | x > (qnt[2] + H)
})
# Specify the columns to remove
columns_to_remove <- c("ID")
# Remove the specified columns from the dataset
new_data <- data[, !names(data) %in% columns_to_remove]
# Check for outliers in the entire dataset
outliers <- sapply(new_data, function(x) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = TRUE)
H <- 1.5 * IQR(x, na.rm = TRUE)
x < (qnt[1] - H) | x > (qnt[2] + H)
})
# Check for outliers in the entire dataset
outliers <- sapply(new_data, function(x) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = TRUE)
H <- 1.5 * IQR(x, na.rm = TRUE)
x < (qnt[1] - H) | x > (qnt[2] + H)
})
# Check for outliers in the entire dataset
outliers <- sapply(# Check for outliers in the entire dataset
outliers <- sapply(new_data, function(x) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = TRUE)
H <- 1.5 * IQR(x, na.rm = TRUE)
x < (qnt[1] - H) | x > (qnt[2] + H)
})
, function(x) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = TRUE)
H <- 1.5 * IQR(x, na.rm = TRUE)
x < (qnt[1] - H) | x > (qnt[2] + H)
})
# Check for outliers in the entire dataset
outliers <- sapply(new_data, function(x) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = TRUE)
H <- 1.5 * IQR(x, na.rm = TRUE)
x < (qnt[1] - H) | x > (qnt[2] + H)
})
# Read CSV file
data <- read.csv("Data_DMML.csv")
library(ggplot2)
# Read CSV file
data <- read.csv("Data_DMML.csv")
setwd("C:/Users/teres/Desktop/Machine Learning/Machine learning coursework/unsupervised")
# Read CSV file
data <- read.csv("Data_DMML.csv")
setwd("C:/Users/teres/Desktop/Machine Learning")
# Read CSV file
data <- read.csv("Data_DMML.csv")
setwd("C:/Users/teres/Desktop/Machine Learning/Machine learning coursework")
# Read CSV file
data <- read.csv("Data_DMML.csv")
library(ggplot2)
library(tidyverse)
library(dplyr)
library(forcats)
library(cluster)
library(fpc)
library(dbscan)
library(stats)
library(factoextra)
library(tidytext)
library(stringr)
library(RColorBrewer)
library(ggpattern)
library(forcats)
library(viridis)
library(hrbrthemes)
library(ggimage)
library(rgl)
library(png)
library(ggdist)
library(gridExtra)
library(rnaturalearth)
library(rnaturalearthdata)
library(sf)
# View the structure of the data
str(data)
# View the first few rows of the data
head(data)
# Specify the columns to remove
columns_to_remove <- c("ID")
# Remove the specified columns from the dataset
new_data <- data[, !names(data) %in% columns_to_remove]
# Check for outliers in the entire dataset
outliers <- sapply(new_data, function(x) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = TRUE)
H <- 1.5 * IQR(x, na.rm = TRUE)
x < (qnt[1] - H) | x > (qnt[2] + H)
})
# Print rows containing outliers
print(new_data[rowSums(outliers) > 0, ])
# Remove outliers from the original data
cleaned_data <- new_data[!rowSums(outliers) > 0, ]
# Scale the cleaned data
scaled_data <- scale(cleaned_data)
# Apply PCA
pca_result <- prcomp(scaled_data, scale. = TRUE)
# Plot the scree plot to visualize the explained variance by each principal component
fviz_eig(pca_result)
#Select the number of principal components to retain
num_components <- 2  # Example: Retain the first 2 principal components
#Extract the selected principal components
pca_data <- as.data.frame(predict(pca_result, newdata = scaled_data)[, 1:num_components])
pam.res <- pam(pca_data, 3)
print(pam.res)
pca_data <- cbind(pca_data, cluster = pam.res$cluster)
pam.res$medoids
fviz_cluster(pam.res, pca_data,
ellipse.type = "convex",
geom=c("point"),
palette = "jco",
ggtheme = theme_classic()) #you can change the color palette and theme to your preferences
# Extract the loadings from the PCA result
loadings <- pca_result$rotation
# Create a dataframe with loadings for each principal component
loadings_df <- as.data.frame(loadings)
# Add column names
colnames(loadings_df) <- paste("PC", 1:ncol(loadings_df))
# Print the loadings dataframe
print(loadings_df)
# Obtain cluster assignments
cluster_assignments <- pam.res$cluster
# Calculate silhouette scores
silhouette_scores <- silhouette(cluster_assignments, dist(pca_data))
# Mean silhouette score
mean_silhouette <- mean(silhouette_scores[, "sil_width"])
# Print mean silhouette score
print(paste("Mean silhouette score:", round(mean_silhouette, 2)))
# Plot silhouette plot
fviz_silhouette(silhouette_scores,
palette = "jco",
ggtheme = theme_classic())
#PRINT NEGATIVE VALUES
# Create a data frame to store cluster assignments and silhouette scores
cluster_silhouette_df <- data.frame(
Cluster = cluster_assignments,
Silhouette_Score = silhouette_scores[, "sil_width"]
)
# Add a column indicating whether the silhouette score is negative
cluster_silhouette_df$Negative_Silhouette <- cluster_silhouette_df$Silhouette_Score < 0
# Filter out only the rows with negative silhouette scores
negative_silhouette_df <- cluster_silhouette_df[cluster_silhouette_df$Negative_Silhouette == TRUE, ]
# Print the table
print("Cluster Assignments with Negative Silhouette Scores:")
print(negative_silhouette_df)
# Compute pairwise-distance matrices for PCA clustering
pca_stats <- dist(pca_data, method = "euclidean")
# Statistics for PCA clustering
pca_stats_result <- cluster.stats(pca_stats, pam.res$cluster)  # assuming 'pam.res' contains the clustering result from PCA
pca_stats_result  # Print the Dunn index and other statistics
setwd("C:/Users/teres/Desktop/DataViz/Activity 2")
# Set the file path
file_path <- "C:\Users\teres\Desktop\DataViz\Activity 2\dataset_garmin_activity (1).csv"
# Set the file path
file_path <- "C:\\Users\\teres\\Desktop\\DataViz\\Activity 2\\dataset_garmin_activity (1).csv"
# Read the CSV file
data <- read.csv(file_path)
# Display the structure of the data
str(data)
# Display the first few rows of the data
head(data)
library(stringr)
# Create new columns for Day_Start, Date_Start, and Time_Start
data$Day_Start <- str_split(data$Start, ", ")[[1]][1]
data$Date_Start <- str_split(data$Start, ", ")[[1]][2]
data$Time_Start <- str_split(data$Start, ", ")[[1]][3]
# Display the updated dataset
print(data)
# Split the "Start" column into Day_Start, Date_Start, and Time_Start
split_start <- str_split(data$Start, ", ")
# Extract components and assign to new columns
data$Day_Start <- sapply(split_start, `[`, 1)
data$Date_Start <- sapply(split_start, `[`, 2)
data$Time_Start <- sapply(str_extract_all(data$Date_Start, "\\d+:\\d+ [AP]M"), `[`, 1)
# Remove the time from Date_Start
data$Date_Start <- gsub("\\d+:\\d+ [AP]M", "", data$Date_Start)
# Display the updated dataset
print(data)
# Split the "Start" column into Day_Start, Date_Start, and Time_Start
split_start <- str_match(data$Start, "^(\\w{3})\\s*(\\d{1,2}\\s\\w{3}\\s\\d{4})\\s*(\\d{1,2}:\\d{2}\\s[AP]M)$")
# Extract components and assign to new columns
data$Day_Start <- split_start[,2]
data$Date_Start <- split_start[,3]
data$Time_Start <- split_start[,4]
# Display the updated dataset
print(data)
# Split the "Start" column into Day_Start, Date_Start, and Time_Start
split_start <- str_match(data$Start, "^\\s*(\\w{3})\\s+(\\d{1,2}\\s+\\w{3}\\s+\\d{4})\\s+(\\d{1,2}:\\d{2}\\s[AP]M)\\s*$")
# Extract components and assign to new columns
data$Day_Start <- split_start[,2]
data$Date_Start <- split_start[,3]
data$Time_Start <- split_start[,4]
# Display the updated dataset
print(data)
# Set the file path
file_path <- "C:\\Users\\teres\\Desktop\\DataViz\\Activity 2\\dataset_garmin_activity (1).csv"
# Read the CSV file
data <- read.csv(file_path)
# Display the first few rows of the data
head(data)
# Set the file path
file_path <- "C:\\Users\\teres\\Desktop\\DataViz\\Activity 2\\dataset_garmin_activity (1).csv"
# Read the CSV file
data <- read.csv(file_path)
# Display the first few rows of the data
head(data)
# Set the file path
file_path <- "C:\\Users\\teres\\Desktop\\DataViz\\Activity 2\\dataset_garmin_activity (1).csv"
# Read the CSV file
data <- read.csv(file_path)
# Display the first few rows of the data
head(data)
# Set the file path
file_path <- "C:\\Users\\teres\\Desktop\\DataViz\\Activity 2\\dataset_garmin_activity (1).csv"
# Read the CSV file
data <- read.csv(file_path)
# Display the first few rows of the data
head(data)
# Define a vector to map abbreviated days to full names
day_mapping <- c("Mon" = "Monday", "Tue" = "Tuesday", "Wed" = "Wednesday",
"Thu" = "Thursday", "Fri" = "Friday", "Sat" = "Saturday",
"Sun" = "Sunday")
# Use the day_mapping vector to replace abbreviated days with full names in the 'Day_Start' column of the 'data' dataframe
data$Day_Start <- day_mapping[data$Day_Start]
# Print the updated 'data' dataframe
print(data)
# Define a vector to map abbreviated days to full names
day_mapping <- c("Mon" = "Monday", "Tue" = "Tuesday", "Wed" = "Wednesday",
"Thu" = "Thursday", "Fri" = "Friday", "Sat" = "Saturday",
"Sun" = "Sunday")
# Use the day_mapping vector to replace abbreviated days with full names in the 'Day_Start' column of the 'data' dataframe
data$Day_Start <- day_mapping[data$Day_Start]
# Define a vector to map abbreviated days to full names
day_mapping <- c("Mon" = "Monday", "Tue" = "Tuesday", "Wed" = "Wednesday",
"Thu" = "Thursday", "Fri" = "Friday", "Sat" = "Saturday",
"Sun" = "Sunday")
# Check unique values in the 'Day_Start' column
unique_days <- unique(data$Day_Start)
# Create a subset of day_mapping with only keys present in unique_days
day_mapping_subset <- day_mapping[unique_days]
# Replace abbreviated days with full names in the 'Day_Start' column of the 'data' dataframe
data$Day_Start <- day_mapping_subset[data$Day_Start]
# Print the updated 'data' dataframe
print(data)
# Replace abbreviated days with full names in the 'Day_Start' column of the 'data' dataframe
data$Day_Start <- day_mapping_subset[data$Day_Start]
# Check unique values in the 'Day_Start' column
unique_days <- unique(data$Day_Start)
# Create a subset of day_mapping with only keys present in unique_days
day_mapping_subset <- day_mapping[unique_days]
# Perform the replacement only for the existing keys
data$Day_Start <- day_mapping_subset[match(data$Day_Start, names(day_mapping_subset))]
